{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["area1","lat","lng","area2","area3","area4","area5","area6","area7","area8","area9","area10","cityBorders","pt1","type","properties","marker-color","geometry","coordinates","poly","name","reverse","toMap","map","l","MyMapComponent","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","lib","className","defaultZoom","defaultCenter","isMarkerShown","position","onClick","onMarkerClick","path","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","App","state","this","isInside1","inside","console","log","inZone","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","longitude","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f6352eb.chunk.js","sourcesContent":["import React from \"react\"\nimport './App.css'\nimport {\n    compose,\n    withProps\n} from \"recompose\"\n\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    Polygon\n} from \"react-google-maps\"\n\nimport {\n    booleanPointInPolygon, inside\n} from '@turf/turf'\n\nconst area1 = \t\t\t\t\t\t[\n    {lat: 21.26611070474684, lng:48.71747233752024 },\n    {lat: 21.26677057260064, lng:48.7166656329094 },\n    {lat: 21.26733501059712, lng:48.71580643787797 },\n    {lat: 21.26736251032685, lng:48.71506900706372 },\n    {lat: 21.26787794664388, lng:48.71522719318407 },\n    {lat: 21.26863753908857, lng:48.71564341994283 },\n    {lat: 21.26939765866221, lng:48.7165793537183 },\n    {lat: 21.26966608133456, lng:48.71705623649765 },\n    {lat: 21.2700354118865, lng:48.71810770591586 },\n    {lat: 21.26997332089527, lng:48.7191243873018 },\n    {lat: 21.26983990777152, lng:48.71950690161629 },\n    {lat: 21.26961203577385, lng:48.71985312035518 },\n    {lat: 21.26952666240232, lng:48.72010880822562 },\n    {lat: 21.26563569264007, lng:48.71916037050208 },\n    {lat: 21.26514480493235, lng:48.71891109363376 },\n    {lat: 21.26509721628115, lng:48.7188554432751 },\n    {lat: 21.26536273350709, lng:48.7185281920167 },\n    {lat: 21.26556396469884, lng:48.71822838645928 },\n    {lat: 21.26546293573485, lng:48.71807364484813 },\n    {lat: 21.26611070474684, lng:48.71747233752024 }\n];\n\nconst area2 = [\n    {lat: 21.26547050283314, lng: 48.7180247747018},\n    {lat: 21.26527968071111, lng: 48.71785419829027},\n    {lat: 21.26305027934983, lng: 48.71718488634205},\n    {lat: 21.26115181682349, lng: 48.71652099525235},\n    {lat: 21.2610597168518, lng: 48.71639511662697},\n    {lat: 21.26101897307229, lng: 48.71621806298811},\n    {lat: 21.26117489079277, lng: 48.71568906138102},\n    {lat: 21.26105443891036, lng: 48.71553269979366},\n    {lat: 21.26093484273553, lng: 48.71552454466993},\n    {lat: 21.26100549017809, lng: 48.71338925367411},\n    {lat: 21.26149478781841, lng: 48.71336434978812},\n    {lat: 21.26385639684157, lng: 48.71298856665499},\n    {lat: 21.26548532983888, lng: 48.71270296490634},\n    {lat: 21.26562333198163, lng: 48.71267801671256},\n    {lat: 21.26617278866978, lng: 48.71342104937738},\n    {lat: 21.26699077839916, lng: 48.71447335210421},\n    {lat: 21.26729965113388, lng: 48.71508104882709},\n    {lat: 21.26727217408974, lng: 48.71573150741328},\n    {lat: 21.26654344778259, lng: 48.71675222358159},\n    {lat: 21.26591932336909, lng: 48.71757110459762},\n    {lat: 21.26591842008419, lng: 48.71758397749612},\n    {lat: 21.26547050283314, lng: 48.7180247747018}\n]\n\nconst area3 = [\n    {lat: 21.26519784797037, lng: 48.70985603691767},\n    {lat: 21.26511576992167, lng: 48.71057959332373},\n    {lat: 21.26520990237419, lng: 48.71123643432868},\n    {lat: 21.26533737357676, lng: 48.71203091544061},\n    {lat: 21.26561979794789, lng: 48.71265567908304},\n    {lat: 21.26374642074399, lng: 48.71298960699437},\n    {lat: 21.26153382267446, lng: 48.71333329104842},\n    {lat: 21.26102884803088, lng: 48.71338086924755},\n    {lat: 21.2609183320457, lng: 48.71260902704344},\n    {lat: 21.26070104346984, lng: 48.71155764597685},\n    {lat: 21.26054648625838, lng: 48.71153955221462},\n    {lat: 21.2601172427277, lng: 48.71139081390589},\n    {lat: 21.26019610409673, lng: 48.71086778257981},\n    {lat: 21.2604087054693, lng: 48.710414709603},\n    {lat: 21.26082834273807, lng: 48.71019169201519},\n    {lat: 21.26140109005772, lng: 48.70823500536864},\n    {lat: 21.26209252754881, lng: 48.70834086536124},\n    {lat: 21.2639630772545, lng: 48.70869971530973},\n    {lat: 21.26541784542476, lng: 48.7090956643532},\n    {lat: 21.26519784797037, lng: 48.70985603691767}\n]\n\nconst area4 = [\n    {lat: 21.26093929797893, lng: 48.71553884312244},\n    {lat: 21.25956837554779, lng: 48.71543628382558},\n    {lat: 21.25938146868774, lng: 48.71548086745317},\n    {lat: 21.25919873118457, lng: 48.7162052630725},\n    {lat: 21.25908567651335, lng: 48.71630286457113},\n    {lat: 21.25771904746958, lng: 48.71618396720437},\n    {lat: 21.25629818432859, lng: 48.7161355301045},\n    {lat: 21.25396640727181, lng: 48.71629547139239},\n    {lat: 21.25365568727686, lng: 48.71629661455108},\n    {lat: 21.25416063177569, lng: 48.71491440773607},\n    {lat: 21.25445221976243, lng: 48.71428525246247},\n    {lat: 21.25536222202151, lng: 48.7126374101989},\n    {lat: 21.25798135383886, lng: 48.71294303343348},\n    {lat: 21.25848530366077, lng: 48.71207672884289},\n    {lat: 21.25887388879129, lng: 48.71117286140461},\n    {lat: 21.26013638689832, lng: 48.71143237743076},\n    {lat: 21.26064082683656, lng: 48.71157019458366},\n    {lat: 21.26088366984189, lng: 48.71265039448959},\n    {lat: 21.26097627407855, lng: 48.7133548225837},\n    {lat: 21.26093971071423, lng: 48.71490900996002},\n    {lat: 21.26093929797893, lng: 48.71553884312244}\n]\n\nconst area5 = [\n    {lat: 21.25472165728956, lng: 48.71372440979044},\n    {lat: 21.25408438944113, lng: 48.71490573905383},\n    {lat: 21.25360554768534, lng: 48.71631056148008},\n    {lat: 21.25249997810609, lng: 48.71638710016956},\n    {lat: 21.25137077836182, lng: 48.71649739198809},\n    {lat: 21.25022306219866, lng: 48.71648488221292},\n    {lat: 21.2490611330737, lng: 48.71624262581696},\n    {lat: 21.24811421777093, lng: 48.7159646221086},\n    {lat: 21.24789641095867, lng: 48.71580265853636},\n    {lat: 21.24756227947157, lng: 48.71490193659645},\n    {lat: 21.24689327484613, lng: 48.71423288765796},\n    {lat: 21.246193645965, lng: 48.71344141182617},\n    {lat: 21.2461672930893, lng: 48.71307316505337},\n    {lat: 21.24616030245655, lng: 48.71242516467778},\n    {lat: 21.24657869594728, lng: 48.71217905800653},\n    {lat: 21.24735089378054, lng: 48.71181233634876},\n    {lat: 21.24808480234424, lng: 48.71175232186651},\n    {lat: 21.25010943555728, lng: 48.71198525715902},\n    {lat: 21.25211322156024, lng: 48.71222068143718},\n    {lat: 21.25534658689924, lng: 48.71262713203102},\n    {lat: 21.25472165728956, lng: 48.71372440979044}\n]\n\nconst area6 = [\n    {lat: 21.24762543517939, lng: 48.71507559632108},\n    {lat: 21.24779832024527, lng: 48.71569962867616},\n    {lat: 21.24811259488715, lng: 48.71598017711926},\n    {lat: 21.24925026172382, lng: 48.71630092260156},\n    {lat: 21.24981361136224, lng: 48.71640655433272},\n    {lat: 21.25025771564709, lng: 48.71650426269373},\n    {lat: 21.2512552906116, lng: 48.71651444182268},\n    {lat: 21.25106626426203, lng: 48.71676512361263},\n    {lat: 21.25091304252969, lng: 48.71727165690777},\n    {lat: 21.24999323902147, lng: 48.71933204009806},\n    {lat: 21.2490086364203, lng: 48.72185921662868},\n    {lat: 21.24834121326643, lng: 48.72173738095717},\n    {lat: 21.24748362933934, lng: 48.72153453624821},\n    {lat: 21.24679597736004, lng: 48.72095042997029},\n    {lat: 21.24646518007734, lng: 48.72043589645202},\n    {lat: 21.24574470302384, lng: 48.7197520966581},\n    {lat: 21.24475042321631, lng: 48.71946451103504},\n    {lat: 21.2442994359997, lng: 48.71943932927449},\n    {lat: 21.2435565007966, lng: 48.71969720361033},\n    {lat: 21.2447040629857, lng: 48.71842664957458},\n    {lat: 21.2454265062367, lng: 48.71735920104305},\n    {lat: 21.24613655863114, lng: 48.71603741282299},\n    {lat: 21.24673750260858, lng: 48.71522701384458},\n    {lat: 21.24734368412505, lng: 48.7147143337582},\n    {lat: 21.24762543517939, lng: 48.71507559632108}\n]\n\nconst area7 = [\n    {lat: 21.23998585622233, lng: 48.7282365574844},\n    {lat: 21.23985866413909, lng: 48.72817080687056},\n    {lat: 21.24013913756911, lng: 48.72719851235855},\n    {lat: 21.24007503266786, lng: 48.72677946556882},\n    {lat: 21.23968736331943, lng: 48.72605710958513},\n    {lat: 21.24130372968173, lng: 48.7242382800459},\n    {lat: 21.24217667018128, lng: 48.72337004216646},\n    {lat: 21.24312326999303, lng: 48.72108677112601},\n    {lat: 21.24343190033521, lng: 48.7206280567704},\n    {lat: 21.24352427817819, lng: 48.72050606621131},\n    {lat: 21.24349300044926, lng: 48.71984566843857},\n    {lat: 21.24356624475161, lng: 48.71968916962285},\n    {lat: 21.24430336078594, lng: 48.71945117715176},\n    {lat: 21.24498301247103, lng: 48.71950244894092},\n    {lat: 21.24580276652635, lng: 48.71979629819641},\n    {lat: 21.24638341466877, lng: 48.72037051501643},\n    {lat: 21.24680980022674, lng: 48.72097962568189},\n    {lat: 21.24748934214103, lng: 48.72154965043365},\n    {lat: 21.24831896265438, lng: 48.7217480601651},\n    {lat: 21.24900896109615, lng: 48.72186779034558},\n    {lat: 21.24894346442524, lng: 48.72311998437224},\n    {lat: 21.24926555767555, lng: 48.72423104307102},\n    {lat: 21.24955282910881, lng: 48.72523579830723},\n    {lat: 21.24959053108643, lng: 48.72589917795416},\n    {lat: 21.24966213402141, lng: 48.72624597887943},\n    {lat: 21.2493479654383, lng: 48.72650338900477},\n    {lat: 21.24742539975195, lng: 48.72671003625491},\n    {lat: 21.24518207742631, lng: 48.72683907932414},\n    {lat: 21.24354914482565, lng: 48.72740959066663},\n    {lat: 21.23998585622233, lng: 48.7282365574844}\n]\n\nconst area8 = [\n    {lat: 21.24348895165045, lng: 48.72743570209995},\n    {lat: 21.24517418757853, lng: 48.72686808327852},\n    {lat: 21.24596198813259, lng: 48.72681830820019},\n    {lat: 21.24772962148258, lng: 48.72670107829632},\n    {lat: 21.24940505850739, lng: 48.7264333385232},\n    {lat: 21.25099701951217, lng: 48.7263458262926},\n    {lat: 21.25462844416774, lng: 48.72713542477074},\n    {lat: 21.25689877479911, lng: 48.72775639125265},\n    {lat: 21.25614102123237, lng: 48.72893223839031},\n    {lat: 21.25461503831459, lng: 48.73093050766331},\n    {lat: 21.25409862836972, lng: 48.73159571074882},\n    {lat: 21.25388424638046, lng: 48.73213613317694},\n    {lat: 21.2508810074242, lng: 48.73093612113485},\n    {lat: 21.2501537808952, lng: 48.73161259370071},\n    {lat: 21.24004781534205, lng: 48.72825739221243},\n    {lat: 21.24348895165045, lng: 48.72743570209995}\n]\n\nconst area9 = [\n    {lat: 21.25422159936233, lng: 48.73159016166506},\n    {lat: 21.25645395766081, lng: 48.72863576705247},\n    {lat: 21.25705895290891, lng: 48.72873642476408},\n    {lat: 21.26067137802806, lng: 48.72965080742076},\n    {lat: 21.26140284964983, lng: 48.73002730797457},\n    {lat: 21.26222338834974, lng: 48.73019337176834},\n    {lat: 21.26388520328283, lng: 48.73057787804311},\n    {lat: 21.26323446520548, lng: 48.73181454379262},\n    {lat: 21.26245168571889, lng: 48.73344060385425},\n    {lat: 21.26223945886888, lng: 48.73354833563128},\n    {lat: 21.26208027794174, lng: 48.73344490869111},\n    {lat: 21.26122099200491, lng: 48.73265280518574},\n    {lat: 21.25794836910048, lng: 48.732516011485},\n    {lat: 21.2558203376639, lng: 48.73236498396957},\n    {lat: 21.25476030844651, lng: 48.73231710274598},\n    {lat: 21.25391707270884, lng: 48.73213385899712},\n    {lat: 21.25422159936233, lng: 48.73159016166506}\n]\n\nconst area10 = [\n    {lat: 21.26394491414724, lng: 48.73054329222214},\n    {lat: 21.26200288598048, lng: 48.73008117863233},\n    {lat: 21.2614003103509, lng: 48.7300175490298},\n    {lat: 21.26078651689782, lng: 48.72965038418978},\n    {lat: 21.26056833578211, lng: 48.72864824350508},\n    {lat: 21.26065881826214, lng: 48.72808299460048},\n    {lat: 21.26118832045295, lng: 48.7273044878168},\n    {lat: 21.26260983038338, lng: 48.72677237225551},\n    {lat: 21.26370734991203, lng: 48.72648277398645},\n    {lat: 21.26526302744209, lng: 48.72605953564047},\n    {lat: 21.2657549235912, lng: 48.72593124590239},\n    {lat: 21.26639282745298, lng: 48.72586470610221},\n    {lat: 21.26493779990923, lng: 48.72876735791608},\n    {lat: 21.26394491414724, lng: 48.73054329222214}\n];\n\nconst cityBorders = [\n    {lat: 21.23469619776246, lng: 48.73262185704039},\n    {lat: 21.24147458887668, lng: 48.70546688266992},\n    {lat: 21.27658647859255, lng: 48.70659340320557},\n    {lat: 21.2732803873103, lng: 48.73386149130498},\n    {lat: 21.23469619776246, lng: 48.73262185704039}\n];\n\n\nvar pt1 = {\n    \"type\": \"Feature\",\n    \"properties\": {\n        \"marker-color\": \"#f00\"\n    },\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [48.72776231, 21.26170752]\n    }\n};\n\nvar poly = {\n    \"name\": \"area1\",\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n            [48.73054329222214, 21.26394491414724],\n            [48.73008117863233, 21.26200288598048],\n            [48.7300175490298, 21.2614003103509],\n            [48.72965038418978, 21.26078651689782],\n            [48.72864824350508, 21.26056833578211],\n            [48.72808299460048, 21.26065881826214],\n            [48.7273044878168, 21.26118832045295],\n            [48.72677237225551, 21.26260983038338],\n            [48.72648277398645, 21.26370734991203],\n            [48.72605953564047, 21.26526302744209],\n            [48.72593124590239, 21.2657549235912],\n            [48.72586470610221, 21.26639282745298],\n            [48.72876735791608, 21.26493779990923],\n            [48.73054329222214, 21.26394491414724]\n        ]]\n    },\n};\n\nfunction inZone() {\n    var isInside1 = inside(pt1, poly);\n    console.log(isInside1);\n}\n\nconst newMarker = {lat: pt1.geometry.coordinates[0], lng: pt1.geometry.coordinates[1]};\n\nconst reverse = (toMap) => {\n    return toMap.map( l => {\n        return {lat: l.lng, lng: l.lat}\n    });\n};\n\n//does not work for left bottom where expected val is [-1,-1]...\n//it is quick but useless\nconst anAlgorithm = (area, position) => {\n    var latSum = 0, lngSum = 0;\n    console.log(area);\n    console.log(position);\n    for (var i = 0; i < area.length; i++){\n        let latLengthToPoint = area[i].lat - position.lat;\n        // console.log(area[i].lat + \" \" +  position.lat);\n        // console.log(area[i].lng + \" \" +  position.lng);\n        // console.log(latLengthToPoint);\n        let latAbsolutePosition = Math.abs(latLengthToPoint);\n        // console.log(latAbsolutePosition);\n        let latMagic = latAbsolutePosition + area[i].lat;\n        console.log(latMagic);\n\n        latSum += latMagic;\n\n        let lngLengthToPoint = area[i].lng - position.lng;\n        // console.log(area[i].lat + \" \" +  position.lat);\n        // console.log(area[i].lng + \" \" +  position.lng);\n        // console.log(lngLengthToPoint);\n        let lngAbsolutePosition = Math.abs(lngLengthToPoint);\n        // console.log(lngAbsolutePosition);\n        let lngMagic = lngAbsolutePosition + area[i].lng;\n        // console.log(lngMagic);\n\n        lngSum += lngMagic;\n    }\n    console.log(latSum);\n    console.log(area.length * position.lat);\n    console.log(lngSum);\n    console.log(area.length * position.lng);\n\n    let latResult = latSum - (area.length * position.lat);\n    let lngResult = lngSum - (area.length * position.lng);\n\n    console.log(\"\\nLat Result is: \" + latResult + \" and Lng result is: \" + lngResult);\n    return (!(latResult === 0 && lngResult === 0));\n};\n\nconst isInCity = (pin) => {\n    //first determine if you are even in city\n    if (anAlgorithm(reverse(cityBorders), pin)) {\n        //you are inside a city\n        //make a data file of coords one JSON file with all needed info\n        //don't do it like a dick...\n    }\n}\n\n\nconst insideAZone = (area, pin) => {\n    //determines whether is in a zone\n    let getIsInZone = anAlgorithm(reverse(area), pin);\n    //you can change data file!\n    //for example to have a name of area type price in it etc...\n    if(getIsInZone){\n        console.log(\"V meste snooov\");\n    } else {\n        console.log(\"V meste nesnooov\");\n    }\n};\n\nconst MyMapComponent = compose(\n    withProps({\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCJU7scD4uZ0nZDS3stMHieSEnLj1mbhxY&callback=initMap\",\n        loadingElement: <div style={{ height: `100%` }} />,\n        containerElement: <div style={{ height: `100vh` }} />,\n        mapElement: <div style={{ height: `100%` }} />,\n\n    }),\n    withScriptjs,\n    withGoogleMap\n)((props) =>\n    <GoogleMap className={\"googleMap\"}\n        defaultZoom={14}\n        defaultCenter={{ lat: 48.720228, lng: 21.258217 }}\n    >\n        {props.isMarkerShown }\n        {/*<Marker position={marker} onClick={props.onMarkerClick}/>*/}\n        <Marker position={{lat: props.lat, lng: props.lng}} onClick={props.onMarkerClick} />\n        <Polygon\n            path={reverse(area1)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area2)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area3)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area4)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area5)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area6)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area7)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area8)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area9)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(area10)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n        <Polygon\n            path={reverse(cityBorders)}\n            //key={1}\n            options={{\n                fillColor: \"#f477ff\",\n                fillOpacity: 0.4,\n                strokeColor: \"#7a5a99\",\n                strokeOpacity: 1,\n                strokeWeight: 1\n            }} />\n    </GoogleMap>\n);\n\nclass App extends React.PureComponent {\n    state = {\n        isMarkerShown: true,\n    };\n\n    render() {\n        return (\n            <div>\n                <MyMapComponent className={\"map\"}\n                    isMarkerShown={this.state.isMarkerShown}\n                    lat={48.72776231}\n                    lng={21.26170752}\n                />\n                {inZone()}\n                {/*{(anAlgorithm(reverse(area10), newMarker)) ? <a>I'm in selected area</a> : <a>Out of area</a>}*/}\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App longitude={\"\"}/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}